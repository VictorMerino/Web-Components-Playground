/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface VicLoadingSpinner {
    }
    interface VicSideDrawer {
        "open": () => Promise<void>;
        "opened": boolean;
        "sdTitle": string;
    }
    interface VicStockFinder {
    }
    interface VicStockPrice {
        "stockSymbol": string;
    }
}
export interface VicStockFinderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLVicStockFinderElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLVicLoadingSpinnerElement extends Components.VicLoadingSpinner, HTMLStencilElement {
    }
    var HTMLVicLoadingSpinnerElement: {
        prototype: HTMLVicLoadingSpinnerElement;
        new (): HTMLVicLoadingSpinnerElement;
    };
    interface HTMLVicSideDrawerElement extends Components.VicSideDrawer, HTMLStencilElement {
    }
    var HTMLVicSideDrawerElement: {
        prototype: HTMLVicSideDrawerElement;
        new (): HTMLVicSideDrawerElement;
    };
    interface HTMLVicStockFinderElementEventMap {
        "vicSymbolSelected": string;
    }
    interface HTMLVicStockFinderElement extends Components.VicStockFinder, HTMLStencilElement {
        addEventListener<K extends keyof HTMLVicStockFinderElementEventMap>(type: K, listener: (this: HTMLVicStockFinderElement, ev: VicStockFinderCustomEvent<HTMLVicStockFinderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLVicStockFinderElementEventMap>(type: K, listener: (this: HTMLVicStockFinderElement, ev: VicStockFinderCustomEvent<HTMLVicStockFinderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLVicStockFinderElement: {
        prototype: HTMLVicStockFinderElement;
        new (): HTMLVicStockFinderElement;
    };
    interface HTMLVicStockPriceElement extends Components.VicStockPrice, HTMLStencilElement {
    }
    var HTMLVicStockPriceElement: {
        prototype: HTMLVicStockPriceElement;
        new (): HTMLVicStockPriceElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "vic-loading-spinner": HTMLVicLoadingSpinnerElement;
        "vic-side-drawer": HTMLVicSideDrawerElement;
        "vic-stock-finder": HTMLVicStockFinderElement;
        "vic-stock-price": HTMLVicStockPriceElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface VicLoadingSpinner {
    }
    interface VicSideDrawer {
        "opened"?: boolean;
        "sdTitle"?: string;
    }
    interface VicStockFinder {
        "onVicSymbolSelected"?: (event: VicStockFinderCustomEvent<string>) => void;
    }
    interface VicStockPrice {
        "stockSymbol"?: string;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "vic-loading-spinner": VicLoadingSpinner;
        "vic-side-drawer": VicSideDrawer;
        "vic-stock-finder": VicStockFinder;
        "vic-stock-price": VicStockPrice;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "vic-loading-spinner": LocalJSX.VicLoadingSpinner & JSXBase.HTMLAttributes<HTMLVicLoadingSpinnerElement>;
            "vic-side-drawer": LocalJSX.VicSideDrawer & JSXBase.HTMLAttributes<HTMLVicSideDrawerElement>;
            "vic-stock-finder": LocalJSX.VicStockFinder & JSXBase.HTMLAttributes<HTMLVicStockFinderElement>;
            "vic-stock-price": LocalJSX.VicStockPrice & JSXBase.HTMLAttributes<HTMLVicStockPriceElement>;
        }
    }
}
